% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R, R/table_as_data_frame.R,
%   R/table_custom.R, R/table_saved.R
\name{sc_table}
\alias{sc_table}
\alias{sc_example}
\alias{as.data.frame.sc_table}
\alias{sc_table_custom}
\alias{sc_table_saved_list}
\alias{sc_table_saved}
\title{Create a request against the /table endpoint}
\usage{
sc_table(json_file, language = c("en", "de"), key = sc_key())

sc_example(filename)

\method{as.data.frame}{sc_table}(
  x,
  ...,
  drop_aggregates = TRUE,
  recode_na = TRUE,
  label_vars = TRUE,
  parse_fields = TRUE
)

sc_table_custom(
  db,
  measures,
  dimensions,
  language = c("en", "de"),
  key = sc_key()
)

sc_table_saved_list()

sc_table_saved(table_uri, language = c("en", "de"), key = sc_key())
}
\arguments{
\item{json_file}{path to a json file, which was downloaded via the STATcube
gui ("Open Data API Abfrage")}

\item{language}{The language to be used for labeling. \code{"en"} or \code{"de"}}

\item{key}{(\code{string}) An API key. To display your key, call
\code{\link[=sc_browse_preferences]{sc_browse_preferences()}}.}

\item{filename}{The name of an example json file.}

\item{x}{an R object of class \code{sc_table}}

\item{...}{unused}

\item{drop_aggregates}{remove rows containing aggregates from the table.
The default (\code{TRUE}) makes the table tidy}

\item{recode_na}{Recode cells to \code{NA} if the corresponding annotations have
the value \code{"X"} (cross tabulation not allowed).}

\item{label_vars}{Use labels for column names. Alternatively, codes are
used}

\item{parse_fields}{Parse field columns as \code{character} or \code{POSIXct}
depending on labels? Alternatively, codes are used}

\item{db}{The uid of a database}

\item{measures}{A character vector of uids for measures. Can be either of
type \code{MEASURE} or of type \code{STAT_FUNCTION}}

\item{dimensions}{A character vector of dimensions for the cube. Can be
either of type \code{FIELD} or type \code{VALUESET}. Those entries are referred to
as \code{fields} in the parsed API response}

\item{table_uri}{Identifier of a saved table as returned by
\code{\link[=sc_table_saved_list]{sc_table_saved_list()}}}
}
\value{
An object of class \code{sc_table} which contains the return
value of the \code{\link[httr:POST]{httr::POST()}} request in \code{obj$response}. The object also
provides member functions to parse this response object.
}
\description{
Send requests against the \strong{\verb{/table}} endpoint of the STATcube REST API. The
requests can use three formats with corresponding functions
\itemize{
\item \code{sc_table()} uses a json file downloaded via the STATcube GUI
\item \code{sc_table_custom()} uses the ids of a database, measures and fields
\item \code{sc_table_saved()} uses a table uri of a saved table.
}

Those three functions all return an object of class \code{"sc_table"}.
}
\examples{
my_table <- sc_table(json_file = sc_example("population_timeseries.json"))

# print
my_table

# get matadata for the table
my_table$meta

# get a data.frame
as.data.frame(my_table) \%>\% head()

# get metadata for field 2
my_table$field(2)

sc_table_custom(
  db = "str:database:detouextregsai",
  measures = c(
    "str:statfn:detouextregsai:F-DATA1:F-ANK:SUM",
    "str:measure:detouextregsai:F-DATA1:F-UEB"
  ),
  dimensions = c(
    "str:field:detouextregsai:F-DATA1:C-SDB_TIT-0",
    "str:valueset:detouextregsai:F-DATA1:C-C93-2:C-C93SUM-0"
  )
)

# get the ids and labels of all saved tables
(saved_tables <- sc_table_saved_list())
table_uri <- saved_tables$id[1]

# get a table based on one of these ids
my_response <- sc_table_saved(table_uri)
as.data.frame(my_response) \%>\% head()
}
\seealso{
Other functions for /table: 
\code{\link{sc_meta}()},
\code{\link{sc_write_json}()}
}
\concept{functions for /table}
